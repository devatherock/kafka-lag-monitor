docker_auth: &docker_auth
  auth:
    username: $DOCKER_USERNAME
    password: $DOCKER_PASSWORD

docker_executor_image: &docker_executor_image
  docker:
    - image: cimg/openjdk:17.0.10
      <<: *docker_auth

vm_executor_image: &vm_executor_image
  machine:
    image: ubuntu-2204:2023.04.2

work_directory: &work_directory
  working_directory: ~/kafka-lag-monitor

resource_class: &resource_class
  resource_class: small
  
release_filter: &release_filter
  filters:
    branches:
      only: non-existent-branch
    tags:
      only: /^v[0-9\.]+$/
      
pr_filter: &pr_filter
  filters:
    branches:
      ignore: master

orbs:
  templates: devatherock/circleci-templates@0.5.0

parameters:
  repo_name:
    type: string
    default: "kafka-lag-monitor"
  
executors:
  jdk-executor:
    docker:
      - image: devatherock/graalvm:17-ol8
        <<: *docker_auth
    <<: *resource_class
    <<: *work_directory
    environment:
      # To generate swagger UI
      JAVA_TOOL_OPTIONS: '-Xmx1536m -Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop'
  docker-executor:
    <<: *docker_executor_image
    <<: *resource_class
    <<: *work_directory
  native-image-executor:
    <<: *docker_executor_image
    resource_class: large
    <<: *work_directory
  native-image-executor-arm:
    <<: *vm_executor_image
    resource_class: arm.large
    <<: *work_directory
  machine-executor:
    <<: *vm_executor_image
    resource_class: medium
    <<: *work_directory
  arm-executor:
    <<: *vm_executor_image
    resource_class: arm.medium
    <<: *work_directory

version: 2.1
jobs:
  test:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/<< pipeline.parameters.repo_name >>
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          make test
          ./gradlew check sonar -x test -Dsonar.token=$SONAR_TOKEN -Dgraalvm=true
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results

  build:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/kafka-lag-monitor
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          make test
          ./gradlew build coveralls sonar -x test -Dsonar.token=$SONAR_TOKEN -Dgraalvm=true
      - persist_to_workspace:
          root: ~/kafka-lag-monitor
          paths:
            - build
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results

  publish:
    executor: native-image-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/<< pipeline.parameters.repo_name >>
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build \
            -t devatherock/<< pipeline.parameters.repo_name >>:$TAG \
            -t devatherock/<< pipeline.parameters.repo_name >>:amd64 \
            -t devatherock/<< pipeline.parameters.repo_name >>:latest .
          docker image push --all-tags devatherock/<< pipeline.parameters.repo_name >>

  publish_arm:
    executor: native-image-executor-arm
    steps:
      - checkout
      - attach_workspace:
          at: ~/<< pipeline.parameters.repo_name >>
      - run: |
          TAG=${CIRCLE_SHA1:0:8}-arm64
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build \
            -t devatherock/<< pipeline.parameters.repo_name >>:$TAG \
            -t devatherock/<< pipeline.parameters.repo_name >>:arm64 .
          docker image push --all-tags devatherock/<< pipeline.parameters.repo_name >>

  integration_test:
    parameters:
      command_args:
        type: string
      runner:
        type: executor
    executor: << parameters.runner >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/<< pipeline.parameters.repo_name >>
      - restore_cache:
          keys:
            - v1-integration-{{ checksum "build.gradle" }}
            - v1-integration
      - run: |
          make integration-test << parameters.command_args >>
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-integration-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results

  publish_release:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/<< pipeline.parameters.repo_name >>
      - run: |
          TAG=${CIRCLE_TAG#v}
          DEV_TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker pull devatherock/<< pipeline.parameters.repo_name >>:$DEV_TAG
          docker tag devatherock/<< pipeline.parameters.repo_name >>:$DEV_TAG devatherock/<< pipeline.parameters.repo_name >>:$TAG
          docker tag devatherock/<< pipeline.parameters.repo_name >>:$DEV_TAG devatherock/<< pipeline.parameters.repo_name >>:${TAG}-amd64
          docker pull devatherock/<< pipeline.parameters.repo_name >>:${DEV_TAG}-arm64
          docker tag devatherock/<< pipeline.parameters.repo_name >>:${DEV_TAG}-arm64 devatherock/<< pipeline.parameters.repo_name >>:${TAG}-arm64
          docker push devatherock/<< pipeline.parameters.repo_name >>:$TAG
          docker push devatherock/<< pipeline.parameters.repo_name >>:${TAG}-amd64
          docker push devatherock/<< pipeline.parameters.repo_name >>:${TAG}-arm64

workflows:
  version: 2.1
  build_publish:
    jobs:
      - templates/yaml_validator:
          name: validate_yamls
          context:
            - docker-credentials
          work_dir: '~/<< pipeline.parameters.repo_name >>'
          filters:
            branches:
              only: master
      - build:
          context:
            - docker-credentials
            - sonar-credentials
          requires:
            - validate_yamls
      - publish:
          context:
            - docker-credentials
          requires:
            - build
      - publish_arm:
          context:
            - docker-credentials
          requires:
            - build
      - templates/dockerhub_readme_update:
          name: dockerhub_readme
          context:
            - docker-credentials
            - dockerhub-readme-credentials
          docker_image: '<< pipeline.parameters.repo_name >>'
          image_description: 'Monitors kafka lag and publishes the metrics to different metrics backends'
          work_dir: '~/<< pipeline.parameters.repo_name >>'
          requires:
            - publish_arm
      - integration_test:
          name: integration_test_amd
          context:
            - docker-credentials
          runner: machine-executor
          command_args: ''
          requires:
            - publish
      - integration_test:
          name: integration_test_arm
          context:
            - docker-credentials
          runner: arm-executor
          command_args: 'docker_tag=arm64'
          requires:
            - dockerhub_readme
      - templates/slack:
          name: notify
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - integration_test_amd
            - integration_test_arm

  release:
    jobs:
      - publish_release:
          context:
            - docker-credentials
          <<: *release_filter
      - templates/slack:
          name: notify
          context:
            - docker-credentials
            - slack-webhook
          <<: *release_filter
          requires:
            - publish_release

  pr_check:
    jobs:
      - templates/changelog_updater:
          name: changelog_updater
          context:
            - docker-credentials
            - changelog-updater-credentials
          <<: *pr_filter
      - templates/yaml_validator:
          name: validate_yamls
          context:
            - docker-credentials
          work_dir: '~/<< pipeline.parameters.repo_name >>'
          requires:
            - changelog_updater
      - test:
          context:
            - docker-credentials
            - sonar-credentials
          requires:
            - validate_yamls